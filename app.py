import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import openai
import os
import json
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise de Vendas de Cerveja",
    page_icon="üç∫",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para aplicar estilo CSS personalizado
def local_css():
    st.markdown("""
    <style>
        .main-header {
            font-size: 2.5rem;
            color: #1E3A8A;
            text-align: center;
            margin-bottom: 1rem;
        }
        .sub-header {
            font-size: 1.8rem;
            color: #2563EB;
            margin-top: 2rem;
            margin-bottom: 1rem;
        }
        .step-header {
            font-size: 1.5rem;
            color: #3B82F6;
            margin-top: 1.5rem;
            margin-bottom: 0.8rem;
            background-color: #EFF6FF;
            padding: 0.5rem;
            border-radius: 0.5rem;
        }
        .info-box {
            background-color: #DBEAFE;
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
        }
        .warning-box {
            background-color: #FEF3C7;
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
        }
        .success-box {
            background-color: #D1FAE5;
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
        }
        .stProgress > div > div > div > div {
            background-color: #3B82F6;
        }
    </style>
    """, unsafe_allow_html=True)

local_css()

# T√≠tulo e introdu√ß√£o
st.markdown("<h1 class='main-header'>An√°lise de Vendas de Cerveja</h1>", unsafe_allow_html=True)
st.markdown("""
<div class='info-box'>
Este aplicativo simula o fluxo completo de um projeto de ci√™ncia de dados, demonstrando visualmente cada etapa do processamento dos dados, como um cientista de dados faria: desde a ingest√£o do arquivo, limpeza, an√°lise explorat√≥ria, at√© a constru√ß√£o de insights estrat√©gicos.
</div>
""", unsafe_allow_html=True)

# Inicializa√ß√£o de vari√°veis de sess√£o
if 'data' not in st.session_state:
    st.session_state.data = None
if 'api_key_valid' not in st.session_state:
    st.session_state.api_key_valid = False
if 'current_step' not in st.session_state:
    st.session_state.current_step = 1
if 'insights' not in st.session_state:
    st.session_state.insights = None

# Barra lateral para navega√ß√£o e configura√ß√µes
with st.sidebar:
    st.markdown("## Navega√ß√£o")
    
    # Chave API do ChatGPT
    api_key = st.text_input("Chave API do ChatGPT", type="password")
    
    if api_key:
        # Validar a chave API
        try:
            openai.api_key = api_key
            # Teste simples para verificar se a chave √© v√°lida
            response = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": "Ol√°"}],
                max_tokens=5
            )
            st.session_state.api_key_valid = True
            st.success("‚úÖ Chave API v√°lida!")
        except Exception as e:
            st.session_state.api_key_valid = False
            st.error(f"‚ùå Chave API inv√°lida: {str(e)}")
    
    # Etapas do processo
    st.markdown("### Etapas do Processo")
    steps = [
        "1. Ingest√£o de Dados",
        "2. Limpeza e Pr√©-processamento",
        "3. An√°lise Explorat√≥ria",
        "4. Visualiza√ß√µes Interativas",
        "5. An√°lise de Correla√ß√µes",
        "6. Insights com IA",
        "7. Conclus√µes e Recomenda√ß√µes"
    ]
    
    for i, step in enumerate(steps, 1):
        if st.button(step, key=f"step_{i}"):
            st.session_state.current_step = i

# Fun√ß√£o para chamar a API do ChatGPT
def get_chatgpt_insights(data_summary, question):
    if not st.session_state.api_key_valid:
        return "Por favor, insira uma chave API v√°lida do ChatGPT para gerar insights."
    
    try:
        prompt = f"""
        Voc√™ √© um analista de dados especializado em vendas de cerveja. Com base nos seguintes dados:
        
        {data_summary}
        
        {question}
        
        Forne√ßa uma an√°lise detalhada com insights estrat√©gicos e recomenda√ß√µes pr√°ticas. 
        Organize sua resposta em t√≥picos claros e inclua sugest√µes espec√≠ficas para otimiza√ß√£o de vendas.
        """
        
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1000
        )
        
        return response.choices[0].message.content
    except Exception as e:
        return f"Erro ao chamar a API do ChatGPT: {str(e)}"

# Fun√ß√£o para carregar e processar o arquivo CSV
def load_data(file):
    try:
        df = pd.read_csv(file)
        return df
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo: {str(e)}")
        return None

# Fun√ß√£o para limpar e pr√©-processar os dados
def preprocess_data(df):
    # C√≥pia para n√£o modificar o original
    df_clean = df.copy()
    
    # Verificar valores ausentes
    missing_values = df_clean.isnull().sum()
    
    # Verificar tipos de dados
    dtypes = df_clean.dtypes
    
    # Converter colunas se necess√°rio
    if 'Vendas (litros)' in df_clean.columns:
        df_clean['Vendas (litros)'] = pd.to_numeric(df_clean['Vendas (litros)'], errors='coerce')
    
    # Verificar outliers nas vendas
    if 'Vendas (litros)' in df_clean.columns:
        Q1 = df_clean['Vendas (litros)'].quantile(0.25)
        Q3 = df_clean['Vendas (litros)'].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        outliers = df_clean[(df_clean['Vendas (litros)'] < lower_bound) | (df_clean['Vendas (litros)'] > upper_bound)]
    else:
        outliers = pd.DataFrame()
    
    return df_clean, missing_values, dtypes, outliers

# Fun√ß√£o para gerar estat√≠sticas descritivas
def generate_stats(df):
    if 'Vendas (litros)' in df.columns:
        stats = df['Vendas (litros)'].describe()
        
        # Estat√≠sticas por marca
        brand_stats = df.groupby('Marca')['Vendas (litros)'].agg(['mean', 'median', 'std', 'sum']).reset_index()
        brand_stats.columns = ['Marca', 'M√©dia', 'Mediana', 'Desvio Padr√£o', 'Total']
        
        # Estat√≠sticas por esta√ß√£o
        season_stats = df.groupby('Esta√ß√£o')['Vendas (litros)'].agg(['mean', 'median', 'std', 'sum']).reset_index()
        season_stats.columns = ['Esta√ß√£o', 'M√©dia', 'Mediana', 'Desvio Padr√£o', 'Total']
        
        # Estat√≠sticas por cidade e bairro
        location_stats = df.groupby(['Cidade', 'Bairro'])['Vendas (litros)'].agg(['mean', 'sum']).reset_index()
        location_stats.columns = ['Cidade', 'Bairro', 'M√©dia', 'Total']
        
        return stats, brand_stats, season_stats, location_stats
    else:
        return None, None, None, None

# Fun√ß√£o para gerar visualiza√ß√µes
def create_visualizations(df):
    visualizations = {}
    
    if 'Vendas (litros)' in df.columns:
        # Vendas por marca
        fig_brands = px.bar(
            df.groupby('Marca')['Vendas (litros)'].sum().reset_index(),
            x='Marca',
            y='Vendas (litros)',
            title='Vendas Totais por Marca',
            color='Marca',
            template='plotly_white'
        )
        visualizations['brands'] = fig_brands
        
        # Vendas por esta√ß√£o
        fig_seasons = px.bar(
            df.groupby('Esta√ß√£o')['Vendas (litros)'].sum().reset_index(),
            x='Esta√ß√£o',
            y='Vendas (litros)',
            title='Vendas Totais por Esta√ß√£o',
            color='Esta√ß√£o',
            category_orders={"Esta√ß√£o": ["Ver√£o", "Outono", "Inverno", "Primavera"]},
            template='plotly_white'
        )
        visualizations['seasons'] = fig_seasons
        
        # Vendas por cidade e bairro
        fig_locations = px.bar(
            df.groupby(['Cidade', 'Bairro'])['Vendas (litros)'].sum().reset_index(),
            x='Bairro',
            y='Vendas (litros)',
            color='Cidade',
            title='Vendas Totais por Localidade',
            barmode='group',
            template='plotly_white'
        )
        visualizations['locations'] = fig_locations
        
        # Vendas por marca e esta√ß√£o
        fig_brand_season = px.bar(
            df.groupby(['Marca', 'Esta√ß√£o'])['Vendas (litros)'].sum().reset_index(),
            x='Esta√ß√£o',
            y='Vendas (litros)',
            color='Marca',
            title='Vendas por Marca e Esta√ß√£o',
            barmode='group',
            category_orders={"Esta√ß√£o": ["Ver√£o", "Outono", "Inverno", "Primavera"]},
            template='plotly_white'
        )
        visualizations['brand_season'] = fig_brand_season
        
        # Distribui√ß√£o das vendas
        fig_dist = px.histogram(
            df,
            x='Vendas (litros)',
            nbins=20,
            title='Distribui√ß√£o das Vendas',
            template='plotly_white'
        )
        visualizations['distribution'] = fig_dist
        
    return visualizations

# Fun√ß√£o para analisar correla√ß√µes
def analyze_correlations(df):
    correlations = {}
    
    if 'Vendas (litros)' in df.columns:
        # Correla√ß√£o entre marca e vendas
        brand_corr = df.groupby('Marca')['Vendas (litros)'].mean().reset_index()
        brand_corr = brand_corr.sort_values('Vendas (litros)', ascending=False)
        
        # Correla√ß√£o entre esta√ß√£o e vendas
        season_corr = df.groupby('Esta√ß√£o')['Vendas (litros)'].mean().reset_index()
        season_order = {"Esta√ß√£o": ["Ver√£o", "Outono", "Inverno", "Primavera"]}
        season_corr = season_corr.set_index('Esta√ß√£o').reindex(season_order["Esta√ß√£o"]).reset_index()
        
        # Correla√ß√£o entre localidade e vendas
        location_corr = df.groupby(['Cidade', 'Bairro'])['Vendas (litros)'].mean().reset_index()
        location_corr = location_corr.sort_values('Vendas (litros)', ascending=False)
        
        # Correla√ß√£o entre marca e esta√ß√£o
        brand_season_corr = df.pivot_table(
            index='Marca',
            columns='Esta√ß√£o',
            values='Vendas (litros)',
            aggfunc='mean'
        ).reset_index()
        
        correlations['brand'] = brand_corr
        correlations['season'] = season_corr
        correlations['location'] = location_corr
        correlations['brand_season'] = brand_season_corr
        
        # Simula√ß√£o de dados clim√°ticos
        # Criando uma rela√ß√£o simulada entre esta√ß√£o e temperatura m√©dia
        temp_map = {
            'Ver√£o': np.random.normal(30, 2, size=len(df[df['Esta√ß√£o'] == 'Ver√£o'])),
            'Outono': np.random.normal(22, 2, size=len(df[df['Esta√ß√£o'] == 'Outono'])),
            'Inverno': np.random.normal(15, 2, size=len(df[df['Esta√ß√£o'] == 'Inverno'])),
            'Primavera': np.random.normal(25, 2, size=len(df[df['Esta√ß√£o'] == 'Primavera']))
        }
        
        df_climate = df.copy()
        df_climate['Temperatura'] = df_climate['Esta√ß√£o'].map(lambda x: np.random.choice(temp_map[x]))
        
        # Correla√ß√£o entre temperatura e vendas
        climate_corr = df_climate.groupby('Temperatura').agg({'Vendas (litros)': 'mean'}).reset_index()
        climate_corr = climate_corr.sort_values('Temperatura')
        
        correlations['climate'] = climate_corr
        correlations['df_climate'] = df_climate
    
    return correlations

# Fun√ß√£o para gerar visualiza√ß√µes de correla√ß√£o
def create_correlation_visualizations(correlations):
    corr_viz = {}
    
    if correlations:
        # Visualiza√ß√£o da correla√ß√£o entre temperatura e vendas
        if 'climate' in correlations:
            fig_climate = px.scatter(
                correlations['climate'],
                x='Temperatura',
                y='Vendas (litros)',
                title='Rela√ß√£o entre Temperatura e Vendas',
                trendline='ols',
                template='plotly_white'
            )
            corr_viz['climate'] = fig_climate
        
        # Mapa de calor da correla√ß√£o entre marca e esta√ß√£o
        if 'brand_season' in correlations:
            brand_season_pivot = correlations['brand_season'].set_index('Marca')
            fig_heatmap = px.imshow(
                brand_season_pivot,
                title='Mapa de Calor: Vendas por Marca e Esta√ß√£o',
                labels=dict(x="Esta√ß√£o", y="Marca", color="Vendas (litros)"),
                x=brand_season_pivot.columns,
                y=brand_season_pivot.index,
                color_continuous_scale='Blues',
                template='plotly_white'
            )
            corr_viz['heatmap'] = fig_heatmap
        
        # Visualiza√ß√£o da correla√ß√£o entre localidade e vendas
        if 'location' in correlations:
            fig_location = px.bar(
                correlations['location'].head(10),
                x='Bairro',
                y='Vendas (litros)',
                color='Cidade',
                title='Top 10 Localidades por M√©dia de Vendas',
                template='plotly_white'
            )
            corr_viz['location'] = fig_location
        
        # Visualiza√ß√£o da correla√ß√£o entre esta√ß√£o e vendas
        if 'season' in correlations:
            fig_season = px.line(
                correlations['season'],
                x='Esta√ß√£o',
                y='Vendas (litros)',
                title='M√©dia de Vendas por Esta√ß√£o',
                markers=True,
                template='plotly_white'
            )
            corr_viz['season'] = fig_season
            
        # Visualiza√ß√£o da correla√ß√£o entre marca e vendas por esta√ß√£o
        if 'df_climate' in correlations:
            fig_brand_temp = px.scatter(
                correlations['df_climate'],
                x='Temperatura',
                y='Vendas (litros)',
                color='Marca',
                title='Vendas por Temperatura e Marca',
                trendline='ols',
                template='plotly_white'
            )
            corr_viz['brand_temp'] = fig_brand_temp
    
    return corr_viz

# Fun√ß√£o para gerar um resumo dos dados para o ChatGPT
def generate_data_summary(df, stats, brand_stats, season_stats, location_stats):
    summary = f"""
    Resumo dos dados de vendas de cerveja:
    
    Estat√≠sticas gerais:
    - Total de registros: {len(df)}
    - M√©dia de vendas: {stats['mean']:.2f} litros
    - Mediana de vendas: {stats['50%']:.2f} litros
    - Desvio padr√£o: {stats['std']:.2f} litros
    - M√≠nimo: {stats['min']:.2f} litros
    - M√°ximo: {stats['max']:.2f} litros
    
    Marcas presentes: {', '.join(df['Marca'].unique())}
    Cidades presentes: {', '.join(df['Cidade'].unique())}
    Bairros presentes: {', '.join(df['Bairro'].unique())}
    Esta√ß√µes do ano: {', '.join(df['Esta√ß√£o'].unique())}
    
    Top 3 marcas por vendas totais:
    {brand_stats.sort_values('Total', ascending=False).head(3)[['Marca', 'Total']].to_string(index=False)}
    
    Vendas por esta√ß√£o (total):
    {season_stats[['Esta√ß√£o', 'Total']].to_string(index=False)}
    
    Top 3 localidades por vendas totais:
    {location_stats.sort_values('Total', ascending=False).head(3)[['Cidade', 'Bairro', 'Total']].to_string(index=False)}
    """
    
    return summary

# Etapa 1: Ingest√£o de Dados
def step_1_data_ingestion():
    st.markdown("<h2 class='sub-header'>Etapa 1: Ingest√£o de Dados</h2>", unsafe_allow_html=True)
    
    st.markdown("""
    <div class='info-box'>
    <b>O que √© ingest√£o de dados?</b><br>
    A ingest√£o de dados √© o processo de importar, transferir e carregar dados para uso ou armazenamento em um banco de dados ou sistema. 
    √â o primeiro passo crucial em qualquer projeto de ci√™ncia de dados, pois determina a qualidade e a disponibilidade dos dados para an√°lise.
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### Upload do Arquivo CSV")
        
        # Op√ß√£o para usar o arquivo de exemplo ou fazer upload
        use_example = st.checkbox("Usar arquivo de exemplo", value=True)
        
        if use_example:
            file_path = "vendas_cerveja_expandida.csv"
            if os.path.exists(file_path):
                df = pd.read_csv(file_path)
                st.session_state.data = df
                st.success(f"‚úÖ Arquivo de exemplo carregado com sucesso: {len(df)} registros")
            else:
                st.error("‚ùå Arquivo de exemplo n√£o encontrado")
        else:
            uploaded_file = st.file_uploader("Escolha um arquivo CSV", type="csv")
            if uploaded_file is not None:
                df = load_data(uploaded_file)
                if df is not None:
                    st.session_state.data = df
                    st.success(f"‚úÖ Arquivo carregado com sucesso: {len(df)} registros")
    
    with col2:
        if st.session_state.data is not None:
            st.markdown("### Visualiza√ß√£o dos Dados Brutos")
            st.dataframe(st.session_state.data.head(10), use_container_width=True)
            
            st.markdown("### Informa√ß√µes do Dataset")
            st.write(f"**N√∫mero de registros:** {len(st.session_state.data)}")
            st.write(f"**Colunas:** {', '.join(st.session_state.data.columns)}")
    
    if st.session_state.data is not None:
        st.markdown("### Estrutura do Dataset")
        buffer = []
        buffer.append(f"**Dimens√µes:** {st.session_state.data.shape[0]} linhas x {st.session_state.data.shape[1]} colunas")
        
        for col in st.session_state.data.columns:
            unique_values = st.session_state.data[col].nunique()
            buffer.append(f"**{col}:** {unique_values} valores √∫nicos")
        
        col1, col2 = st.columns(2)
        for i, item in enumerate(buffer):
            if i < len(buffer) // 2:
                col1.markdown(item)
            else:
                col2.markdown(item)
        
        if st.button("Avan√ßar para Limpeza e Pr√©-processamento ‚ñ∂Ô∏è"):
            st.session_state.current_step = 2
            st.experimental_rerun()

# Etapa 2: Limpeza e Pr√©-processamento
def step_2_preprocessing():
    st.markdown("<h2 class='sub-header'>Etapa 2: Limpeza e Pr√©-processamento</h2>", unsafe_allow_html=True)
    
    st.markdown("""
    <div class='info-box'>
    <b>Por que limpar e pr√©-processar dados?</b><br>
    A limpeza e o pr√©-processamento de dados s√£o essenciais para garantir a qualidade e a confiabilidade das an√°lises. 
    Dados brutos frequentemente cont√™m erros, valores ausentes ou inconsist√™ncias que podem comprometer os resultados. 
    Esta etapa prepara os dados para an√°lise, removendo ru√≠dos e garantindo que estejam em um formato adequado.
    </div>
    """, unsafe_allow_html=True)
    
    if st.session_state.data is not None:
        # Processar os dados
        df_clean, missing_values, dtypes, outliers = preprocess_data(st.session_state.data)
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.markdown("<h3 class='step-header'>Verifica√ß√£o de Valores Ausentes</h3>", unsafe_allow_html=True)
            if missing_values.sum() == 0:
                st.success("‚úÖ N√£o foram encontrados valores ausentes no dataset!")
            else:
                st.warning(f"‚ö†Ô∏è Foram encontrados {missing_values.sum()} valores ausentes.")
                st.write(missing_values)
            
            st.markdown("<h3 class='step-header'>Tipos de Dados</h3>", unsafe_allow_html=True)
            st.write(dtypes)
        
        with col2:
            st.markdown("<h3 class='step-header'>Verifica√ß√£o de Outliers</h3>", unsafe_allow_html=True)
            if len(outliers) == 0:
                st.success("‚úÖ N√£o foram detectados outliers significativos nas vendas.")
            else:
                st.warning(f"‚ö†Ô∏è Foram detectados {len(outliers)} poss√≠veis outliers nas vendas.")
                st.dataframe(outliers.head())
            
            st.markdown("<h3 class='step-header'>Estat√≠sticas B√°sicas</h3>", unsafe_allow_html=True)
            if 'Vendas (litros)' in df_clean.columns:
                st.write(df_clean['Vendas (litros)'].describe())
        
        st.markdown("<h3 class='step-header'>Dados Ap√≥s Pr√©-processamento</h3>", unsafe_allow_html=True)
        st.dataframe(df_clean.head(10), use_container_width=True)
        
        # Atualizar os dados na sess√£o
        st.session_state.data = df_clean
        
        st.markdown("""
        <div class='success-box'>
        <b>Resultado do Pr√©-processamento:</b><br>
        Os dados foram verificados e est√£o prontos para an√°lise. Foram realizadas verifica√ß√µes de valores ausentes, 
        tipos de dados e outliers. Os dados est√£o em um formato adequado para prosseguir com a an√°lise explorat√≥ria.
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("Avan√ßar para An√°lise Explorat√≥ria ‚ñ∂Ô∏è"):
            st.session_state.current_step = 3
            st.experimental_rerun()
    else:
        st.warning("‚ö†Ô∏è Por favor, carregue os dados na etapa anterior.")
        if st.button("Voltar para Ingest√£o de Dados ‚óÄÔ∏è"):
            st.session_state.current_step = 1
            st.experimental_rerun()

# Etapa 3: An√°lise Explorat√≥ria
def step_3_exploratory_analysis():
    st.markdown("<h2 class='sub-header'>Etapa 3: An√°lise Explorat√≥ria de Dados</h2>", unsafe_allow_html=True)
    
    st.markdown("""
    <div class='info-box'>
    <b>O que √© An√°lise Explorat√≥ria de Dados (EDA)?</b><br>
    A An√°lise Explorat√≥ria de Dados √© o processo de examinar e investigar conjuntos de dados para descobrir padr√µes, 
    identificar anomalias, testar hip√≥teses e verificar suposi√ß√µes usando estat√≠sticas e representa√ß√µes gr√°ficas. 
    √â uma etapa fundamental que ajuda a entender a estrutura e as caracter√≠sticas dos dados antes de aplicar t√©cnicas mais avan√ßadas.
    </div>
    """, unsafe_allow_html=True)
    
    if st.session_state.data is not None:
        # Gerar estat√≠sticas
        stats, brand_stats, season_stats, location_stats = generate_stats(st.session_state.data)
        
        if stats is not None:
            st.markdown("<h3 class='step-header'>Estat√≠sticas Descritivas Gerais</h3>", unsafe_allow_html=True)
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.metric("M√©dia de Vendas", f"{stats['mean']:.2f} litros")
                st.metric("M√≠nimo", f"{stats['min']:.2f} litros")
                st.metric("25%", f"{stats['25%']:.2f} litros")
            
            with col2:
                st.metric("Mediana", f"{stats['50%']:.2f} litros")
                st.metric("75%", f"{stats['75%']:.2f} litros")
                st.metric("M√°ximo", f"{stats['max']:.2f} litros")
            
            st.markdown("<h3 class='step-header'>An√°lise por Marca</h3>", unsafe_allow_html=True)
            st.dataframe(brand_stats, use_container_width=True)
            
            # Gr√°fico de barras para vendas totais por marca
            fig_brand = px.bar(
                brand_stats,
                x='Marca',
                y='Total',
                title='Vendas Totais por Marca',
                color='Marca',
                template='plotly_white'
            )
            st.plotly_chart(fig_brand, use_container_width=True)
            
            st.markdown("<h3 class='step-header'>An√°lise por Esta√ß√£o</h3>", unsafe_allow_html=True)
            st.dataframe(season_stats, use_container_width=True)
            
            # Gr√°fico de barras para vendas totais por esta√ß√£o
            fig_season = px.bar(
                season_stats,
                x='Esta√ß√£o',
                y='Total',
                title='Vendas Totais por Esta√ß√£o',
                color='Esta√ß√£o',
                category_orders={"Esta√ß√£o": ["Ver√£o", "Outono", "Inverno", "Primavera"]},
                template='plotly_white'
            )
            st.plotly_chart(fig_season, use_container_width=True)
            
            st.markdown("<h3 class='step-header'>An√°lise por Localidade</h3>", unsafe_allow_html=True)
            st.dataframe(location_stats.sort_values('Total', ascending=False).head(10), use_container_width=True)
            
            # Gr√°fico de barras para vendas totais por localidade (top 10)
            fig_location = px.bar(
                location_stats.sort_values('Total', ascending=False).head(10),
                x='Bairro',
                y='Total',
                title='Top 10 Localidades por Vendas Totais',
                color='Cidade',
                template='plotly_white'
            )
            st.plotly_chart(fig_location, use_container_width=True)
            
            st.markdown("""
            <div class='success-box'>
            <b>Insights da An√°lise Explorat√≥ria:</b><br>
            A an√°lise explorat√≥ria revelou padr√µes importantes nas vendas de cerveja por marca, esta√ß√£o do ano e localidade. 
            Estes insights iniciais fornecem uma base s√≥lida para an√°lises mais detalhadas e visualiza√ß√µes interativas na pr√≥xima etapa.
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("Avan√ßar para Visualiza√ß√µes Interativas ‚ñ∂Ô∏è"):
                st.session_state.current_step = 4
                st.experimental_rerun()
        else:
            st.error("‚ùå N√£o foi poss√≠vel gerar estat√≠sticas. Verifique se os dados cont√™m a coluna 'Vendas (litros)'.")
    else:
        st.warning("‚ö†Ô∏è Por favor, carregue os dados na primeira etapa.")
        if st.button("Voltar para Ingest√£o de Dados ‚óÄÔ∏è"):
            st.session_state.current_step = 1
            st.experimental_rerun()

# Etapa 4: Visualiza√ß√µes Interativas
def step_4_interactive_visualizations():
    st.markdown("<h2 class='sub-header'>Etapa 4: Visualiza√ß√µes Interativas</h2>", unsafe_allow_html=True)
    
    st.markdown("""
    <div class='info-box'>
    <b>Por que visualiza√ß√µes interativas s√£o importantes?</b><br>
    As visualiza√ß√µes interativas permitem explorar os dados de forma din√¢mica, revelando padr√µes e rela√ß√µes que podem n√£o ser evidentes em tabelas ou gr√°ficos est√°ticos. 
    Elas facilitam a comunica√ß√£o de insights complexos e permitem que os usu√°rios explorem os dados de acordo com seus interesses espec√≠ficos.
    </div>
    """, unsafe_allow_html=True)
    
    if st.session_state.data is not None:
        df = st.session_state.data
        
        # Filtros interativos
        st.markdown("<h3 class='step-header'>Filtros</h3>", unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            selected_cities = st.multiselect(
                "Selecione as Cidades",
                options=df['Cidade'].unique(),
                default=df['Cidade'].unique()
            )
        
        with col2:
            selected_neighborhoods = st.multiselect(
                "Selecione os Bairros",
                options=df['Bairro'].unique(),
                default=df['Bairro'].unique()
            )
        
        with col3:
            selected_seasons = st.multiselect(
                "Selecione as Esta√ß√µes",
                options=df['Esta√ß√£o'].unique(),
                default=df['Esta√ß√£o'].unique()
            )
        
        # Filtrar os dados
        filtered_df = df[
            (df['Cidade'].isin(selected_cities)) &
            (df['Bairro'].isin(selected_neighborhoods)) &
            (df['Esta√ß√£o'].isin(selected_seasons))
        ]
        
        if len(filtered_df) > 0:
            # Gerar visualiza√ß√µes
            visualizations = create_visualizations(filtered_df)
            
            st.markdown("<h3 class='step-header'>Vendas por Marca</h3>", unsafe_allow_html=True)
            st.plotly_chart(visualizations['brands'], use_container_width=True)
            
            st.markdown("<h3 class='step-header'>Vendas por Esta√ß√£o</h3>", unsafe_allow_html=True)
            st.plotly_chart(visualizations['seasons'], use_container_width=True)
            
            st.markdown("<h3 class='step-header'>Vendas por Localidade</h3>", unsafe_allow_html=True)
            st.plotly_chart(visualizations['locations'], use_container_width=True)
            
            st.markdown("<h3 class='step-header'>Vendas por Marca e Esta√ß√£o</h3>", unsafe_allow_html=True)
            st.plotly_chart(visualizations['brand_season'], use_container_width=True)
            
            st.markdown("<h3 class='step-header'>Distribui√ß√£o das Vendas</h3>", unsafe_allow_html=True)
            st.plotly_chart(visualizations['distribution'], use_container_width=True)
            
            st.markdown("""
            <div class='success-box'>
            <b>Insights das Visualiza√ß√µes:</b><br>
            As visualiza√ß√µes interativas permitem explorar os dados de diferentes perspectivas, revelando padr√µes de vendas por marca, 
            esta√ß√£o do ano e localidade. Voc√™ pode usar os filtros acima para focar em segmentos espec√≠ficos e descobrir insights mais detalhados.
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("Avan√ßar para An√°lise de Correla√ß√µes ‚ñ∂Ô∏è"):
                st.session_state.current_step = 5
                st.experimental_rerun()
        else:
            st.warning("‚ö†Ô∏è Nenhum dado encontrado com os filtros selecionados.")
    else:
        st.warning("‚ö†Ô∏è Por favor, carregue os dados na primeira etapa.")
        if st.button("Voltar para Ingest√£o de Dados ‚óÄÔ∏è"):
            st.session_state.current_step = 1
            st.experimental_rerun()

# Etapa 5: An√°lise de Correla√ß√µes
def step_5_correlation_analysis():
    st.markdown("<h2 class='sub-header'>Etapa 5: An√°lise de Correla√ß√µes</h2>", unsafe_allow_html=True)
    
    st.markdown("""
    <div class='info-box'>
    <b>O que √© an√°lise de correla√ß√£o?</b><br>
    A an√°lise de correla√ß√£o examina a rela√ß√£o entre diferentes vari√°veis para identificar padr√µes e depend√™ncias. 
    Uma correla√ß√£o positiva indica que duas vari√°veis tendem a aumentar juntas, enquanto uma correla√ß√£o negativa indica que uma vari√°vel tende a diminuir quando a outra aumenta. 
    Esta an√°lise √© crucial para entender os fatores que influenciam as vendas de cerveja.
    </div>
    """, unsafe_allow_html=True)
    
    if st.session_state.data is not None:
        # Analisar correla√ß√µes
        correlations = analyze_correlations(st.session_state.data)
        
        if correlations:
            # Criar visualiza√ß√µes de correla√ß√£o
            corr_viz = create_correlation_visualizations(correlations)
            
            st.markdown("<h3 class='step-header'>Rela√ß√£o entre Temperatura e Vendas</h3>", unsafe_allow_html=True)
            st.markdown("""
            <div class='info-box'>
            <b>Nota:</b> Os dados de temperatura s√£o simulados para demonstrar a an√°lise de correla√ß√£o com fatores clim√°ticos.
            </div>
            """, unsafe_allow_html=True)
            st.plotly_chart(corr_viz['climate'], use_container_width=True)
            
            st.markdown("<h3 class='step-header'>Mapa de Calor: Vendas por Marca e Esta√ß√£o</h3>", unsafe_allow_html=True)
            st.plotly_chart(corr_viz['heatmap'], use_container_width=True)
            
            st.markdown("<h3 class='step-header'>Top 10 Localidades por M√©dia de Vendas</h3>", unsafe_allow_html=True)
            st.plotly_chart(corr_viz['location'], use_container_width=True)
            
            st.markdown("<h3 class='step-header'>M√©dia de Vendas por Esta√ß√£o</h3>", unsafe_allow_html=True)
            st.plotly_chart(corr_viz['season'], use_container_width=True)
            
            st.markdown("<h3 class='step-header'>Vendas por Temperatura e Marca</h3>", unsafe_allow_html=True)
            st.plotly_chart(corr_viz['brand_temp'], use_container_width=True)
            
            st.markdown("""
            <div class='success-box'>
            <b>Insights da An√°lise de Correla√ß√£o:</b><br>
            A an√°lise de correla√ß√£o revela rela√ß√µes importantes entre as vendas de cerveja e fatores como temperatura, esta√ß√£o do ano e localidade. 
            Estas correla√ß√µes fornecem insights valiosos para estrat√©gias de marketing, gest√£o de estoque e segmenta√ß√£o de mercado.
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("Avan√ßar para Insights com IA ‚ñ∂Ô∏è"):
                st.session_state.current_step = 6
                st.experimental_rerun()
        else:
            st.error("‚ùå N√£o foi poss√≠vel analisar correla√ß√µes. Verifique se os dados cont√™m as colunas necess√°rias.")
    else:
        st.warning("‚ö†Ô∏è Por favor, carregue os dados na primeira etapa.")
        if st.button("Voltar para Ingest√£o de Dados ‚óÄÔ∏è"):
            st.session_state.current_step = 1
            st.experimental_rerun()

# Etapa 6: Insights com IA
def step_6_ai_insights():
    st.markdown("<h2 class='sub-header'>Etapa 6: Insights com IA</h2>", unsafe_allow_html=True)
    
    st.markdown("""
    <div class='info-box'>
    <b>Como a IA pode ajudar na an√°lise de dados?</b><br>
    A Intelig√™ncia Artificial pode processar grandes volumes de dados e identificar padr√µes complexos que podem passar despercebidos na an√°lise humana. 
    Nesta etapa, utilizamos o ChatGPT para interpretar os resultados das an√°lises anteriores e gerar insights estrat√©gicos para otimiza√ß√£o de vendas.
    </div>
    """, unsafe_allow_html=True)
    
    if not st.session_state.api_key_valid:
        st.warning("‚ö†Ô∏è Por favor, insira uma chave API v√°lida do ChatGPT na barra lateral para gerar insights.")
    elif st.session_state.data is not None:
        # Gerar estat√≠sticas para o resumo
        stats, brand_stats, season_stats, location_stats = generate_stats(st.session_state.data)
        
        if stats is not None:
            # Gerar resumo dos dados
            data_summary = generate_data_summary(
                st.session_state.data,
                stats,
                brand_stats,
                season_stats,
                location_stats
            )
            
            st.markdown("<h3 class='step-header'>Perguntas para o ChatGPT</h3>", unsafe_allow_html=True)
            
            # Op√ß√µes de perguntas pr√©-definidas
            question_options = [
                "Quais s√£o os principais insights estrat√©gicos baseados nos dados de vendas?",
                "Como otimizar o estoque de cerveja com base nas tend√™ncias sazonais?",
                "Quais estrat√©gias de marketing seriam mais eficazes para cada marca?",
                "Como segmentar o mercado com base nos padr√µes de consumo identificados?",
                "Quais s√£o as oportunidades de crescimento em diferentes localidades?"
            ]
            
            selected_question = st.selectbox(
                "Selecione uma pergunta ou escreva a sua pr√≥pria:",
                options=["Selecione uma pergunta..."] + question_options
            )
            
            custom_question = st.text_area(
                "Ou escreva sua pr√≥pria pergunta:",
                height=100,
                placeholder="Ex: Quais s√£o as melhores estrat√©gias para aumentar as vendas durante o inverno?"
            )
            
            final_question = custom_question if custom_question else selected_question
            
            if final_question and final_question != "Selecione uma pergunta...":
                if st.button("Gerar Insights com IA"):
                    with st.spinner("Gerando insights com IA... Isso pode levar alguns segundos."):
                        insights = get_chatgpt_insights(data_summary, final_question)
                        st.session_state.insights = insights
            
            if st.session_state.insights:
                st.markdown("<h3 class='step-header'>Insights Gerados pela IA</h3>", unsafe_allow_html=True)
                st.markdown(st.session_state.insights)
                
                st.markdown("""
                <div class='success-box'>
                <b>Pr√≥ximos Passos:</b><br>
                Os insights gerados pela IA podem ser utilizados para informar decis√µes estrat√©gicas, como campanhas de marketing sazonais, 
                ajustes de estoque e segmenta√ß√£o de mercado. Na pr√≥xima etapa, apresentaremos um resumo das principais descobertas e recomenda√ß√µes.
                </div>
                """, unsafe_allow_html=True)
                
                if st.button("Avan√ßar para Conclus√µes e Recomenda√ß√µes ‚ñ∂Ô∏è"):
                    st.session_state.current_step = 7
                    st.experimental_rerun()
        else:
            st.error("‚ùå N√£o foi poss√≠vel gerar estat√≠sticas. Verifique se os dados cont√™m a coluna 'Vendas (litros)'.")
    else:
        st.warning("‚ö†Ô∏è Por favor, carregue os dados na primeira etapa.")
        if st.button("Voltar para Ingest√£o de Dados ‚óÄÔ∏è"):
            st.session_state.current_step = 1
            st.experimental_rerun()

# Etapa 7: Conclus√µes e Recomenda√ß√µes
def step_7_conclusions():
    st.markdown("<h2 class='sub-header'>Etapa 7: Conclus√µes e Recomenda√ß√µes</h2>", unsafe_allow_html=True)
    
    st.markdown("""
    <div class='info-box'>
    <b>Import√¢ncia das conclus√µes e recomenda√ß√µes:</b><br>
    Esta etapa final sintetiza todas as descobertas e insights obtidos ao longo do processo de an√°lise de dados. 
    As conclus√µes e recomenda√ß√µes transformam dados brutos em a√ß√µes concretas que podem ser implementadas para otimizar as vendas de cerveja.
    </div>
    """, unsafe_allow_html=True)
    
    if st.session_state.data is not None and st.session_state.insights:
        st.markdown("<h3 class='step-header'>Resumo do Projeto</h3>", unsafe_allow_html=True)
        
        st.markdown("""
        Neste projeto, realizamos uma an√°lise completa dos dados de vendas de cerveja, seguindo o fluxo de trabalho de um cientista de dados:
        
        1. **Ingest√£o de Dados**: Carregamos e examinamos a estrutura dos dados de vendas.
        
        2. **Limpeza e Pr√©-processamento**: Verificamos valores ausentes, outliers e garantimos a qualidade dos dados.
        
        3. **An√°lise Explorat√≥ria**: Calculamos estat√≠sticas descritivas e identificamos padr√µes iniciais nos dados.
        
        4. **Visualiza√ß√µes Interativas**: Criamos gr√°ficos din√¢micos para explorar os dados de diferentes perspectivas.
        
        5. **An√°lise de Correla√ß√µes**: Examinamos rela√ß√µes entre vendas e fatores como esta√ß√£o do ano, localidade e temperatura.
        
        6. **Insights com IA**: Utilizamos o ChatGPT para interpretar os resultados e gerar insights estrat√©gicos.
        """)
        
        st.markdown("<h3 class='step-header'>Principais Descobertas</h3>", unsafe_allow_html=True)
        
        # Gerar estat√≠sticas
        stats, brand_stats, season_stats, location_stats = generate_stats(st.session_state.data)
        
        if stats is not None:
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### Top 3 Marcas por Vendas Totais")
                top_brands = brand_stats.sort_values('Total', ascending=False).head(3)
                for i, row in top_brands.iterrows():
                    st.metric(f"{i+1}. {row['Marca']}", f"{row['Total']:,.0f} litros")
            
            with col2:
                st.markdown("#### Esta√ß√µes por Vendas Totais")
                season_order = ["Ver√£o", "Outono", "Inverno", "Primavera"]
                sorted_seasons = season_stats.set_index('Esta√ß√£o').loc[season_order].reset_index()
                for i, row in sorted_seasons.iterrows():
                    st.metric(f"{row['Esta√ß√£o']}", f"{row['Total']:,.0f} litros")
        
        st.markdown("<h3 class='step-header'>Insights Estrat√©gicos da IA</h3>", unsafe_allow_html=True)
        st.markdown(st.session_state.insights)
        
        st.markdown("<h3 class='step-header'>Recomenda√ß√µes Finais</h3>", unsafe_allow_html=True)
        
        st.markdown("""
        Com base em todas as an√°lises realizadas, recomendamos:
        
        1. **Otimiza√ß√£o de Estoque**: Ajustar o estoque de acordo com as tend√™ncias sazonais identificadas.
        
        2. **Campanhas de Marketing Direcionadas**: Desenvolver campanhas espec√≠ficas para cada marca, considerando sua performance em diferentes esta√ß√µes e localidades.
        
        3. **Expans√£o Geogr√°fica**: Focar em expandir a presen√ßa em bairros com alto potencial de vendas.
        
        4. **Promo√ß√µes Sazonais**: Criar promo√ß√µes especiais para as esta√ß√µes com menor volume de vendas.
        
        5. **Monitoramento Cont√≠nuo**: Implementar um sistema de monitoramento cont√≠nuo para acompanhar o desempenho das vendas e ajustar estrat√©gias conforme necess√°rio.
        """)
        
        st.markdown("""
        <div class='success-box'>
        <b>Conclus√£o do Projeto:</b><br>
        Este projeto demonstrou como a ci√™ncia de dados pode transformar dados brutos de vendas em insights estrat√©gicos valiosos. 
        A combina√ß√£o de t√©cnicas estat√≠sticas, visualiza√ß√µes interativas e intelig√™ncia artificial permite uma compreens√£o profunda dos padr√µes de vendas de cerveja, 
        fornecendo uma base s√≥lida para decis√µes de neg√≥cios baseadas em dados.
        </div>
        """, unsafe_allow_html=True)
        
        # Bot√£o para reiniciar o processo
        if st.button("Reiniciar An√°lise üîÑ"):
            st.session_state.current_step = 1
            st.experimental_rerun()
    else:
        if not st.session_state.data:
            st.warning("‚ö†Ô∏è Por favor, carregue os dados na primeira etapa.")
        elif not st.session_state.insights:
            st.warning("‚ö†Ô∏è Por favor, gere insights com IA na etapa anterior.")
        
        if st.button("Voltar para Ingest√£o de Dados ‚óÄÔ∏è"):
            st.session_state.current_step = 1
            st.experimental_rerun()

# Executar a etapa atual
if st.session_state.current_step == 1:
    step_1_data_ingestion()
elif st.session_state.current_step == 2:
    step_2_preprocessing()
elif st.session_state.current_step == 3:
    step_3_exploratory_analysis()
elif st.session_state.current_step == 4:
    step_4_interactive_visualizations()
elif st.session_state.current_step == 5:
    step_5_correlation_analysis()
elif st.session_state.current_step == 6:
    step_6_ai_insights()
elif st.session_state.current_step == 7:
    step_7_conclusions()

# Rodap√©
st.markdown("---")
st.markdown(
    f"<div style='text-align: center; color: gray; font-size: 0.8rem;'>An√°lise de Vendas de Cerveja ‚Ä¢ Desenvolvido com Streamlit ‚Ä¢ {datetime.now().strftime('%Y-%m-%d')}</div>",
    unsafe_allow_html=True
)
